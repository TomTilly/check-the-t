<%
	for(let i = 0; i < routePredictions.predictions.length; i++) {
		const routePrediction = routePrediction[i];
		const routeType = routePrediction.route.attributes.description;
		const routeID = routePrediction.route.id;
		const stopName = routePrediction.stop.name;
		let routeName;
		if(routeType === 'Local Bus') {
			routeName = routeType.toLowerCase().replace(/ /g,'-');
		} else if (routeID === "741" || routeID === "742" || routeID === "743" || routeID === "751" || routeID === "749") {
			routeName = "silver-line";
		} else if (routeID === 'Mattapan') {
			routeName = "red-line";
		} else {
			// will create red-line, green-line, blue-line, etc...
			// .replace is necessary to get rid of the specifiers
			routeName = `${routeID.toLowerCase().replace(/-./,'')}-line`;
		}

		const predictionsWithDirection0 = routePrediction.predictions.filter(p => p.attributes.direction_id);
		const predictionsWithDirection1 = routePrediction.predictions.filter(p => p.attributes.direction_id);



%>

<!-- TODO
			- Add function for calculating arrival times
-->
	<section class="stop-container">
		<h1 class="route-name <%= routeName %>">
		<% if(routeName === 'local-bus') { %>
			<span class="stop-num"><%= routeID %></span>	
		<% } else { %>
			<img alt="MBTA T Logo" class="T-logo" src="imgs/T-logo-w-transparent-bk.svg">
		<% }%>
			<span><%= routePrediction.route.attributes.long_name %></span>
		</h1>
		<% if(predictionsWithDirection0.length) { %>
		<h2 class="direction"><%= routePrediction.route.attributes.direction_names[0] %></h2>
			<ul>
				<% predictionsWithDirection0.forEach(prediction => { %>
					<li>
						<span class="arrival-time">5 min</span>
						<span><%= stopName %> (to <%
							const tripID = prediction.relationships.trip.data.id;
							const destination = routePrediction.trips.find(trip => trip.id === tripID).attributes.headsign;
						%><%= destination %>)</span>
					</li>
				<% }); %>
			</ul>
			<h2 class="direction"><%= routePrediction.route.attributes.direction_names[1] %></h2>
			<ul>
				<% predictionsWithDirection1.forEach(prediction => { %>
					<li>
						<span class="arrival-time">5 min</span>
						<span><%= stopName %> (to <%
							const tripID = prediction.relationships.trip.data.id;
							const destination = routePrediction.trips.find(trip => trip.id === tripID).attributes.headsign;
						%><%= destination %>)</span>
					</li>
				<% }); %>
			</ul>
		</section>
	} %>